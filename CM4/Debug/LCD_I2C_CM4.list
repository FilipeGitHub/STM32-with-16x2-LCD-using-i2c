
LCD_I2C_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce4  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f10  08003f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f18  08003f18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003f2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003f2c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012484  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002816  00000000  00000000  000324ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00034cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00035f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c165  00000000  00000000  00037108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013022  00000000  00000000  0005326d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aecc5  00000000  00000000  0006628f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114f54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d34  00000000  00000000  00114fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003e04 	.word	0x08003e04

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003e04 	.word	0x08003e04

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4313      	orrs	r3, r2
 800049e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4013      	ands	r3, r2
 80004aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ac:	68fb      	ldr	r3, [r7, #12]
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	2001      	movs	r0, #1
 80004ce:	f7ff ffdb 	bl	8000488 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	2002      	movs	r0, #2
 80004d4:	f7ff ffd8 	bl	8000488 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d8:	2004      	movs	r0, #4
 80004da:	f7ff ffd5 	bl	8000488 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <MX_GPIO_Init+0x58>)
 80004e6:	f000 fe35 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80004ea:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80004ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f0:	2301      	movs	r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	2302      	movs	r3, #2
 80004fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	4619      	mov	r1, r3
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <MX_GPIO_Init+0x58>)
 8000502:	f000 fcc7 	bl	8000e94 <HAL_GPIO_Init>

}
 8000506:	bf00      	nop
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	48000400 	.word	0x48000400

08000514 <LL_AHB2_GRP1_EnableClock>:
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4313      	orrs	r3, r2
 800055a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800055c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000560:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4013      	ands	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000568:	68fb      	ldr	r3, [r7, #12]
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_I2C1_Init+0x74>)
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <MX_I2C1_Init+0x78>)
 800057c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000580:	f640 6214 	movw	r2, #3604	; 0xe14
 8000584:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_I2C1_Init+0x74>)
 800058e:	2201      	movs	r2, #1
 8000590:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005b2:	f000 fde6 	bl	8001182 <HAL_I2C_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005bc:	f000 f9d0 	bl	8000960 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005c4:	f001 fa62 	bl	8001a8c <HAL_I2CEx_ConfigAnalogFilter>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005ce:	f000 f9c7 	bl	8000960 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_I2C1_Init+0x74>)
 80005d6:	f001 faa3 	bl	8001b20 <HAL_I2CEx_ConfigDigitalFilter>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005e0:	f000 f9be 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000028 	.word	0x20000028
 80005ec:	40005400 	.word	0x40005400

080005f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	; 0x58
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2238      	movs	r2, #56	; 0x38
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fbef 	bl	8003df4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <HAL_I2C_MspInit+0x88>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d126      	bne.n	800066e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000624:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000628:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fd08 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800063a:	f000 f991 	bl	8000960 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2002      	movs	r0, #2
 8000640:	f7ff ff68 	bl	8000514 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000644:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800064a:	2312      	movs	r3, #18
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000656:	2304      	movs	r3, #4
 8000658:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800065e:	4619      	mov	r1, r3
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <HAL_I2C_MspInit+0x8c>)
 8000662:	f000 fc17 	bl	8000e94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000666:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800066a:	f7ff ff6b 	bl	8000544 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800066e:	bf00      	nop
 8000670:	3758      	adds	r7, #88	; 0x58
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40005400 	.word	0x40005400
 800067c:	48000400 	.word	0x48000400

08000680 <LCD_Init>:
  /* USER CODE END I2C1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LCD_Init(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	/*Function Set - As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET1);
 8000684:	2033      	movs	r0, #51	; 0x33
 8000686:	f000 f811 	bl	80006ac <LCD_Send_Cmd>

	/*Function Set -As per HD44780U*/
	LCD_Send_Cmd(LCD_FUNCTION_SET2);
 800068a:	2032      	movs	r0, #50	; 0x32
 800068c:	f000 f80e 	bl	80006ac <LCD_Send_Cmd>

	/*Set 4bit mode and 2 lines */
	LCD_Send_Cmd(LCD_4BIT_2LINE_MODE);
 8000690:	2028      	movs	r0, #40	; 0x28
 8000692:	f000 f80b 	bl	80006ac <LCD_Send_Cmd>

	/*Display on, cursor off*/
	LCD_Send_Cmd(0x0C);
 8000696:	200c      	movs	r0, #12
 8000698:	f000 f808 	bl	80006ac <LCD_Send_Cmd>

	/* SET Row1 and Col1 (1st Line) */
	LCD_Send_Cmd(0x80);
 800069c:	2080      	movs	r0, #128	; 0x80
 800069e:	f000 f805 	bl	80006ac <LCD_Send_Cmd>

	/*Clear Display*/
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f000 f802 	bl	80006ac <LCD_Send_Cmd>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint8_t cmd){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (cmd & 0xF0);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((cmd << 4) & 0xF0);
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	f043 030c 	orr.w	r3, r3, #12
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	737b      	strb	r3, [r7, #13]

	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN;
 80006d8:	7bbb      	ldrb	r3, [r7, #14]
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT;
 80006e2:	7bbb      	ldrb	r3, [r7, #14]
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(&hi2c1, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 80006ec:	230a      	movs	r3, #10
 80006ee:	2201      	movs	r2, #1
 80006f0:	217e      	movs	r1, #126	; 0x7e
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <LCD_Send_Cmd+0x9c>)
 80006f4:	f000 fec8 	bl	8001488 <HAL_I2C_IsDeviceReady>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d108      	bne.n	8000710 <LCD_Send_Cmd+0x64>
		HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100);
 80006fe:	f107 020c 	add.w	r2, r7, #12
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2302      	movs	r3, #2
 8000708:	217e      	movs	r1, #126	; 0x7e
 800070a:	480f      	ldr	r0, [pc, #60]	; (8000748 <LCD_Send_Cmd+0x9c>)
 800070c:	f000 fdc8 	bl	80012a0 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	HAL_Delay(5);
 8000710:	2005      	movs	r0, #5
 8000712:	f000 fab9 	bl	8000c88 <HAL_Delay>

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(&hi2c1, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 8000716:	230a      	movs	r3, #10
 8000718:	2201      	movs	r2, #1
 800071a:	217e      	movs	r1, #126	; 0x7e
 800071c:	480a      	ldr	r0, [pc, #40]	; (8000748 <LCD_Send_Cmd+0x9c>)
 800071e:	f000 feb3 	bl	8001488 <HAL_I2C_IsDeviceReady>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d108      	bne.n	800073a <LCD_Send_Cmd+0x8e>
		HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);
 8000728:	f107 0208 	add.w	r2, r7, #8
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2302      	movs	r3, #2
 8000732:	217e      	movs	r1, #126	; 0x7e
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <LCD_Send_Cmd+0x9c>)
 8000736:	f000 fdb3 	bl	80012a0 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	HAL_Delay(5);
 800073a:	2005      	movs	r0, #5
 800073c:	f000 faa4 	bl	8000c88 <HAL_Delay>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000028 	.word	0x20000028

0800074c <LCD_Send_Data>:

void LCD_Send_Data(uint8_t data){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af02      	add	r7, sp, #8
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_u_tx[2], data_l_tx[2];

	/*Store upper nibble*/
	data_u = (data & 0xF0);
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f023 030f 	bic.w	r3, r3, #15
 800075c:	73fb      	strb	r3, [r7, #15]

	/*Store lower nibble*/
	data_l = ((data << 4) & 0xF0);
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	73bb      	strb	r3, [r7, #14]

	/* Construct upper byte-> compatible for LCD*/
	data_u_tx[0] = data_u|BACKLIGHT|PIN_EN|PIN_RS;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	f043 030d 	orr.w	r3, r3, #13
 800076a:	b2db      	uxtb	r3, r3
 800076c:	733b      	strb	r3, [r7, #12]
	data_u_tx[1] = data_u|BACKLIGHT|PIN_RS;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	f043 0309 	orr.w	r3, r3, #9
 8000774:	b2db      	uxtb	r3, r3
 8000776:	737b      	strb	r3, [r7, #13]

	/* Construct lower byte-> compatible for LCD*/
	data_l_tx[0] = data_l|BACKLIGHT|PIN_EN|PIN_RS;
 8000778:	7bbb      	ldrb	r3, [r7, #14]
 800077a:	f043 030d 	orr.w	r3, r3, #13
 800077e:	b2db      	uxtb	r3, r3
 8000780:	723b      	strb	r3, [r7, #8]
	data_l_tx[1] = data_l|BACKLIGHT|PIN_RS;
 8000782:	7bbb      	ldrb	r3, [r7, #14]
 8000784:	f043 0309 	orr.w	r3, r3, #9
 8000788:	b2db      	uxtb	r3, r3
 800078a:	727b      	strb	r3, [r7, #9]

	/* Transmit upper nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(&hi2c1, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 800078c:	230a      	movs	r3, #10
 800078e:	2201      	movs	r2, #1
 8000790:	217e      	movs	r1, #126	; 0x7e
 8000792:	4814      	ldr	r0, [pc, #80]	; (80007e4 <LCD_Send_Data+0x98>)
 8000794:	f000 fe78 	bl	8001488 <HAL_I2C_IsDeviceReady>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d108      	bne.n	80007b0 <LCD_Send_Data+0x64>
		HAL_I2C_Master_Transmit(&hi2c1,I2C_SLAVE_ADDRESS, data_u_tx, 2, 100);
 800079e:	f107 020c 	add.w	r2, r7, #12
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2302      	movs	r3, #2
 80007a8:	217e      	movs	r1, #126	; 0x7e
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <LCD_Send_Data+0x98>)
 80007ac:	f000 fd78 	bl	80012a0 <HAL_I2C_Master_Transmit>

	/*Provide a delay */
	//HAL_Delay(1);

	/* Transmit lower nibble using I2C APIs*/
	if(HAL_I2C_IsDeviceReady(&hi2c1, I2C_SLAVE_ADDRESS, 1, 10) == HAL_OK)
 80007b0:	230a      	movs	r3, #10
 80007b2:	2201      	movs	r2, #1
 80007b4:	217e      	movs	r1, #126	; 0x7e
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <LCD_Send_Data+0x98>)
 80007b8:	f000 fe66 	bl	8001488 <HAL_I2C_IsDeviceReady>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d108      	bne.n	80007d4 <LCD_Send_Data+0x88>
		HAL_I2C_Master_Transmit(&hi2c1, I2C_SLAVE_ADDRESS, data_l_tx, 2, 100);
 80007c2:	f107 0208 	add.w	r2, r7, #8
 80007c6:	2364      	movs	r3, #100	; 0x64
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2302      	movs	r3, #2
 80007cc:	217e      	movs	r1, #126	; 0x7e
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <LCD_Send_Data+0x98>)
 80007d0:	f000 fd66 	bl	80012a0 <HAL_I2C_Master_Transmit>

    /*Provide a delay */
    HAL_Delay(5);
 80007d4:	2005      	movs	r0, #5
 80007d6:	f000 fa57 	bl	8000c88 <HAL_Delay>
}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000028 	.word	0x20000028

080007e8 <LCD_Send_String>:

void LCD_Send_String(char *str){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	while (*str)
 80007f0:	e006      	b.n	8000800 <LCD_Send_String+0x18>
		{
			LCD_Send_Data(*str++);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffa6 	bl	800074c <LCD_Send_Data>
	while (*str)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1f4      	bne.n	80007f2 <LCD_Send_String+0xa>
		}
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <LCD_Send_String_On_Line1>:
void LCD_Clear_Then_Display(char *str){
	LCD_Send_Cmd(LCD_CLEAR_DISPLAY);
	LCD_Send_String(str);
}

void LCD_Send_String_On_Line1(char *str){
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	LCD_Send_Cmd(LCD_SET_ROW1_COL1);
 800081a:	2080      	movs	r0, #128	; 0x80
 800081c:	f7ff ff46 	bl	80006ac <LCD_Send_Cmd>
	LCD_Send_String(str);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ffe1 	bl	80007e8 <LCD_Send_String>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <LCD_Send_String_On_Line2>:

void LCD_Send_String_On_Line2(char *str){
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	LCD_Send_Cmd(LCD_SET_ROW2_COL1);
 8000836:	20c0      	movs	r0, #192	; 0xc0
 8000838:	f7ff ff38 	bl	80006ac <LCD_Send_Cmd>
	LCD_Send_String(str);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff ffd3 	bl	80007e8 <LCD_Send_String>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800085a:	f023 0218 	bic.w	r2, r3, #24
 800085e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 f990 	bl	8000b9c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f816 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f7ff fe1a 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000884:	f000 f8ce 	bl	8000a24 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000888:	f7ff fe74 	bl	8000574 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 800088c:	f7ff fef8 	bl	8000680 <LCD_Init>
  LCD_Send_String_On_Line1("Test L1");
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <main+0x30>)
 8000892:	f7ff ffbe 	bl	8000812 <LCD_Send_String_On_Line1>
  LCD_Send_String_On_Line2("Test L2");
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <main+0x34>)
 8000898:	f7ff ffc9 	bl	800082e <LCD_Send_String_On_Line2>
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800089c:	2001      	movs	r0, #1
 800089e:	f001 f9b3 	bl	8001c08 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <main+0x2e>
 80008a4:	08003e1c 	.word	0x08003e1c
 80008a8:	08003e24 	.word	0x08003e24

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09a      	sub	sp, #104	; 0x68
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2248      	movs	r2, #72	; 0x48
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 fa9a 	bl	8003df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d2:	f001 f971 	bl	8001bb8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff ffb7 	bl	800084a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <SystemClock_Config+0xb0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <SystemClock_Config+0xb0>)
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <SystemClock_Config+0xb0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008f8:	2324      	movs	r3, #36	; 0x24
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008fc:	2381      	movs	r3, #129	; 0x81
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000904:	2300      	movs	r3, #0
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000908:	2360      	movs	r3, #96	; 0x60
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fc39 	bl	800218c <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000920:	f000 f81e 	bl	8000960 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000924:	236f      	movs	r3, #111	; 0x6f
 8000926:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f001 ffbd 	bl	80028c4 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000950:	f000 f806 	bl	8000960 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3768      	adds	r7, #104	; 0x68
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58000400 	.word	0x58000400

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>

0800096a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr

08000976 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097a:	e7fe      	b.n	800097a <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <HardFault_Handler+0x4>

08000982 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <BusFault_Handler+0x4>

0800098e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f948 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <LL_AHB2_GRP1_EnableClock>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4313      	orrs	r3, r2
 80009da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e8:	68fb      	ldr	r3, [r7, #12]
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <LL_APB1_GRP1_EnableClock>:
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a18:	68fb      	ldr	r3, [r7, #12]
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_USART2_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a6e:	f002 fc24 	bl	80032ba <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f7ff ff72 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a80:	f003 f8cc 	bl	8003c1c <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f7ff ff69 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000a92:	f003 f901 	bl	8003c98 <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f7ff ff60 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_USART2_UART_Init+0x90>)
 8000aa2:	f003 f883 	bl	8003bac <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f7ff ff58 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000074 	.word	0x20000074
 8000ab8:	40004400 	.word	0x40004400

08000abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b096      	sub	sp, #88	; 0x58
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2238      	movs	r2, #56	; 0x38
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 f989 	bl	8003df4 <memset>
  if(uartHandle->Instance==USART2)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d126      	bne.n	8000b3a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000af4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 faa2 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b06:	f7ff ff2b 	bl	8000960 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b0e:	f7ff ff71 	bl	80009f4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff ff56 	bl	80009c4 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f000 f9ad 	bl	8000e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3758      	adds	r7, #88	; 0x58
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400

08000b48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b4c:	f7ff fc96 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b76:	f003 f919 	bl	8003dac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fe7b 	bl	8000874 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	08003f20 	.word	0x08003f20
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	20000108 	.word	0x20000108

08000b98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f000 f942 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000bac:	f002 f86c 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <HAL_Init+0x3c>)
 8000bb4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f810 	bl	8000bdc <HAL_InitTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	e001      	b.n	8000bcc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc8:	f7ff fecf 	bl	800096a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000000 	.word	0x20000000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_InitTick+0x6c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d024      	beq.n	8000c3a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf0:	f002 f84a 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_InitTick+0x6c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f936 	bl	8000e7a <HAL_SYSTICK_Config>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10f      	bne.n	8000c34 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	d809      	bhi.n	8000c2e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c22:	f000 f910 	bl	8000e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <HAL_InitTick+0x70>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e007      	b.n	8000c3e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e004      	b.n	8000c3e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_IncTick+0x20>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000104 	.word	0x20000104

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	20000104 	.word	0x20000104

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff fff0 	bl	8000c74 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffe0 	bl	8000c74 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff90 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff49 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff60 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff92 	bl	8000d88 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff61 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffb2 	bl	8000dec <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e140      	b.n	8001126 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 8132 	beq.w	8001120 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d005      	beq.n	8000ed4 <HAL_GPIO_Init+0x40>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	f003 0201 	and.w	r2, r3, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d017      	beq.n	8000f72 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d123      	bne.n	8000fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	220f      	movs	r2, #15
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	08da      	lsrs	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3208      	adds	r2, #8
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0203 	and.w	r2, r3, #3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 808c 	beq.w	8001120 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001008:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <HAL_GPIO_Init+0x2b0>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	2207      	movs	r2, #7
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001032:	d00d      	beq.n	8001050 <HAL_GPIO_Init+0x1bc>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a44      	ldr	r2, [pc, #272]	; (8001148 <HAL_GPIO_Init+0x2b4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x1b8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a43      	ldr	r2, [pc, #268]	; (800114c <HAL_GPIO_Init+0x2b8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_GPIO_Init+0x1b4>
 8001044:	2302      	movs	r3, #2
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x1be>
 8001048:	2307      	movs	r3, #7
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x1be>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x1be>
 8001050:	2300      	movs	r3, #0
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001062:	4938      	ldr	r1, [pc, #224]	; (8001144 <HAL_GPIO_Init+0x2b0>)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001094:	4a2e      	ldr	r2, [pc, #184]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 80010c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ca:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80010ea:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 80010f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010f8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_GPIO_Init+0x2bc>)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f aeb7 	bne.w	8000ea4 <HAL_GPIO_Init+0x10>
  }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40010000 	.word	0x40010000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000800 	.word	0x48000800
 8001150:	58000800 	.word	0x58000800

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001170:	e002      	b.n	8001178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e081      	b.n	8001298 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d106      	bne.n	80011ae <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fa21 	bl	80005f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2224      	movs	r2, #36	; 0x24
 80011b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 0201 	bic.w	r2, r2, #1
 80011c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d107      	bne.n	80011fc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e006      	b.n	800120a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001208:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d104      	bne.n	800121c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69d9      	ldr	r1, [r3, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	817b      	strh	r3, [r7, #10]
 80012b0:	4613      	mov	r3, r2
 80012b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b20      	cmp	r3, #32
 80012be:	f040 80da 	bne.w	8001476 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_I2C_Master_Transmit+0x30>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e0d3      	b.n	8001478 <HAL_I2C_Master_Transmit+0x1d8>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012d8:	f7ff fccc 	bl	8000c74 <HAL_GetTick>
 80012dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2319      	movs	r3, #25
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f9f6 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0be      	b.n	8001478 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2221      	movs	r2, #33	; 0x21
 80012fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2210      	movs	r2, #16
 8001306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	893a      	ldrh	r2, [r7, #8]
 800131a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001326:	b29b      	uxth	r3, r3
 8001328:	2bff      	cmp	r3, #255	; 0xff
 800132a:	d90e      	bls.n	800134a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001336:	b2da      	uxtb	r2, r3
 8001338:	8979      	ldrh	r1, [r7, #10]
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_I2C_Master_Transmit+0x1e0>)
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fb72 	bl	8001a2c <I2C_TransferConfig>
 8001348:	e06c      	b.n	8001424 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001358:	b2da      	uxtb	r2, r3
 800135a:	8979      	ldrh	r1, [r7, #10]
 800135c:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_I2C_Master_Transmit+0x1e0>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 fb61 	bl	8001a2c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800136a:	e05b      	b.n	8001424 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	6a39      	ldr	r1, [r7, #32]
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f9f3 	bl	800175c <I2C_WaitOnTXISFlagUntilTimeout>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e07b      	b.n	8001478 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139a:	b29b      	uxth	r3, r3
 800139c:	3b01      	subs	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d034      	beq.n	8001424 <HAL_I2C_Master_Transmit+0x184>
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d130      	bne.n	8001424 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2200      	movs	r2, #0
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f985 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e04d      	b.n	8001478 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2bff      	cmp	r3, #255	; 0xff
 80013e4:	d90e      	bls.n	8001404 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	22ff      	movs	r2, #255	; 0xff
 80013ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	8979      	ldrh	r1, [r7, #10]
 80013f4:	2300      	movs	r3, #0
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 fb15 	bl	8001a2c <I2C_TransferConfig>
 8001402:	e00f      	b.n	8001424 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001408:	b29a      	uxth	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001412:	b2da      	uxtb	r2, r3
 8001414:	8979      	ldrh	r1, [r7, #10]
 8001416:	2300      	movs	r3, #0
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 fb04 	bl	8001a2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d19e      	bne.n	800136c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	6a39      	ldr	r1, [r7, #32]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 f9d2 	bl	80017dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e01a      	b.n	8001478 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2220      	movs	r2, #32
 8001448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_I2C_Master_Transmit+0x1e4>)
 8001456:	400b      	ands	r3, r1
 8001458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2220      	movs	r2, #32
 800145e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001476:	2302      	movs	r3, #2
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	80002000 	.word	0x80002000
 8001484:	fe00e800 	.word	0xfe00e800

08001488 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	; 0x28
 800148c:	af02      	add	r7, sp, #8
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	460b      	mov	r3, r1
 8001496:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b20      	cmp	r3, #32
 80014a6:	f040 80f1 	bne.w	800168c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b8:	d101      	bne.n	80014be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80014ba:	2302      	movs	r3, #2
 80014bc:	e0e7      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_I2C_IsDeviceReady+0x44>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e0e0      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2224      	movs	r2, #36	; 0x24
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d107      	bne.n	80014fa <HAL_I2C_IsDeviceReady+0x72>
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f8:	e004      	b.n	8001504 <HAL_I2C_IsDeviceReady+0x7c>
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001500:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800150a:	f7ff fbb3 	bl	8000c74 <HAL_GetTick>
 800150e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	2b20      	cmp	r3, #32
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	2b10      	cmp	r3, #16
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800153c:	e034      	b.n	80015a8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d01a      	beq.n	800157c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001546:	f7ff fb95 	bl	8000c74 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d302      	bcc.n	800155c <HAL_I2C_IsDeviceReady+0xd4>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10f      	bne.n	800157c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	f043 0220 	orr.w	r2, r3, #32
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e088      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b20      	cmp	r3, #32
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b10      	cmp	r3, #16
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_I2C_IsDeviceReady+0x12c>
 80015ae:	7fbb      	ldrb	r3, [r7, #30]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0c4      	beq.n	800153e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d01a      	beq.n	80015f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	2120      	movs	r1, #32
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 f885 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e058      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2220      	movs	r2, #32
 80015e2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e04a      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	2120      	movs	r1, #32
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f86a 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e03d      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2210      	movs	r2, #16
 8001618:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2220      	movs	r2, #32
 8001620:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d118      	bne.n	800165c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001638:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f849 	bl	80016dc <I2C_WaitOnFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e01c      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2220      	movs	r2, #32
 800165a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	f63f af3b 	bhi.w	80014e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f043 0220 	orr.w	r2, r3, #32
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800168c:	2302      	movs	r3, #2
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d103      	bne.n	80016b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d007      	beq.n	80016d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	619a      	str	r2, [r3, #24]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ec:	e022      	b.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d01e      	beq.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f6:	f7ff fabd 	bl	8000c74 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d302      	bcc.n	800170c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d113      	bne.n	8001734 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	f043 0220 	orr.w	r2, r3, #32
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2220      	movs	r2, #32
 800171c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e00f      	b.n	8001754 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4013      	ands	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d0cd      	beq.n	80016ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001768:	e02c      	b.n	80017c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f870 	bl	8001854 <I2C_IsErrorOccurred>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e02a      	b.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d01e      	beq.n	80017c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001786:	f7ff fa75 	bl	8000c74 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	429a      	cmp	r2, r3
 8001794:	d302      	bcc.n	800179c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d113      	bne.n	80017c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e007      	b.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d1cb      	bne.n	800176a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017e8:	e028      	b.n	800183c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f830 	bl	8001854 <I2C_IsErrorOccurred>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e026      	b.n	800184c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017fe:	f7ff fa39 	bl	8000c74 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	d302      	bcc.n	8001814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d113      	bne.n	800183c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0220 	orr.w	r2, r3, #32
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e007      	b.n	800184c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b20      	cmp	r3, #32
 8001848:	d1cf      	bne.n	80017ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d075      	beq.n	800196c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2210      	movs	r2, #16
 8001886:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001888:	e056      	b.n	8001938 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d052      	beq.n	8001938 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001892:	f7ff f9ef 	bl	8000c74 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d302      	bcc.n	80018a8 <I2C_IsErrorOccurred+0x54>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d147      	bne.n	8001938 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80018ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ca:	d12e      	bne.n	800192a <I2C_IsErrorOccurred+0xd6>
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018d2:	d02a      	beq.n	800192a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80018d4:	7cfb      	ldrb	r3, [r7, #19]
 80018d6:	2b20      	cmp	r3, #32
 80018d8:	d027      	beq.n	800192a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018ea:	f7ff f9c3 	bl	8000c74 <HAL_GetTick>
 80018ee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018f0:	e01b      	b.n	800192a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018f2:	f7ff f9bf 	bl	8000c74 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b19      	cmp	r3, #25
 80018fe:	d914      	bls.n	800192a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f043 0220 	orr.w	r2, r3, #32
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2220      	movs	r2, #32
 8001910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b20      	cmp	r3, #32
 8001936:	d1dc      	bne.n	80018f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b20      	cmp	r3, #32
 8001944:	d003      	beq.n	800194e <I2C_IsErrorOccurred+0xfa>
 8001946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800194a:	2b00      	cmp	r3, #0
 800194c:	d09d      	beq.n	800188a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800194e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001952:	2b00      	cmp	r3, #0
 8001954:	d103      	bne.n	800195e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2220      	movs	r2, #32
 800195c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f043 0308 	orr.w	r3, r3, #8
 80019a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80019da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01c      	beq.n	8001a1c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff fe57 	bl	8001696 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6859      	ldr	r1, [r3, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <I2C_IsErrorOccurred+0x1d4>)
 80019f4:	400b      	ands	r3, r1
 80019f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	fe00e800 	.word	0xfe00e800

08001a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	817b      	strh	r3, [r7, #10]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a4c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a5a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	0d5b      	lsrs	r3, r3, #21
 8001a66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <I2C_TransferConfig+0x5c>)
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	ea02 0103 	and.w	r1, r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	03ff63ff 	.word	0x03ff63ff

08001a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d138      	bne.n	8001b14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e032      	b.n	8001b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ade:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6819      	ldr	r1, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d139      	bne.n	8001baa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e033      	b.n	8001bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
  }
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	58000400 	.word	0x58000400

08001bd4 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <LL_PWR_EnableBootC2+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <LL_PWR_EnableBootC2+0x18>)
 8001bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	58000400 	.word	0x58000400

08001bf0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_PWREx_GetVoltageRange+0x14>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	58000400 	.word	0x58000400

08001c08 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001c10:	f7ff ffe0 	bl	8001bd4 <LL_PWR_EnableBootC2>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <LL_PWR_IsEnabledBkUpAccess>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c2c:	d101      	bne.n	8001c32 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	58000400 	.word	0x58000400

08001c40 <LL_RCC_HSE_EnableTcxo>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_HSE_DisableTcxo>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c8a:	d101      	bne.n	8001c90 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_HSE_Enable>:
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_HSE_Disable>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <LL_RCC_HSE_IsReady>:
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ce4:	d101      	bne.n	8001cea <LL_RCC_HSE_IsReady+0x18>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <LL_RCC_HSE_IsReady+0x1a>
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <LL_RCC_HSI_Enable>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_HSI_Disable>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <LL_RCC_HSI_IsReady>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3e:	d101      	bne.n	8001d44 <LL_RCC_HSI_IsReady+0x18>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <LL_RCC_HSI_IsReady+0x1a>
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_HSI_SetCalibTrimming>:
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	061b      	lsls	r3, r3, #24
 8001d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d101      	bne.n	8001d8e <LL_RCC_LSE_IsReady+0x18>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_RCC_LSE_IsReady+0x1a>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d101      	bne.n	8001df0 <LL_RCC_LSI_IsReady+0x18>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <LL_RCC_LSI_IsReady+0x1a>
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6013      	str	r3, [r2, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6013      	str	r3, [r2, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d101      	bne.n	8001e48 <LL_RCC_MSI_IsReady+0x16>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <LL_RCC_MSI_IsReady+0x18>
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d101      	bne.n	8001e68 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f023 0203 	bic.w	r2, r3, #3
 8001eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr

08001f2a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f64:	f023 020f 	bic.w	r2, r3, #15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002072:	d101      	bne.n	8002078 <LL_RCC_PLL_IsReady+0x18>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <LL_RCC_PLL_IsReady+0x1a>
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr

08002082 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0303 	and.w	r3, r3, #3
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d101      	bne.n	80020f4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002106:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002112:	d101      	bne.n	8002118 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d101      	bne.n	800213c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002158:	d101      	bne.n	800215e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800217a:	d101      	bne.n	8002180 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
	...

0800218c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e38b      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800219e:	f7ff fea6 	bl	8001eee <LL_RCC_GetSysClkSource>
 80021a2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a4:	f7ff ff8f 	bl	80020c6 <LL_RCC_PLL_GetMainSource>
 80021a8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80c9 	beq.w	800234a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x3e>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d17b      	bne.n	80022bc <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d178      	bne.n	80022bc <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ca:	f7ff fe32 	bl	8001e32 <LL_RCC_MSI_IsReady>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_OscConfig+0x54>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e36a      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x72>
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fc:	e006      	b.n	800220c <HAL_RCC_OscConfig+0x80>
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220c:	4293      	cmp	r3, r2
 800220e:	d222      	bcs.n	8002256 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fd6f 	bl	8002cf8 <RCC_SetFlashLatencyFromMSIRange>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e348      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe26 	bl	8001ea0 <LL_RCC_MSI_SetCalibTrimming>
 8002254:	e021      	b.n	800229a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fe0d 	bl	8001ea0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fd34 	bl	8002cf8 <RCC_SetFlashLatencyFromMSIRange>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e30d      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800229a:	f000 fcf5 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 800229e:	4603      	mov	r3, r0
 80022a0:	4aa1      	ldr	r2, [pc, #644]	; (8002528 <HAL_RCC_OscConfig+0x39c>)
 80022a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022a4:	4ba1      	ldr	r3, [pc, #644]	; (800252c <HAL_RCC_OscConfig+0x3a0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fc97 	bl	8000bdc <HAL_InitTick>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80022b2:	7cfb      	ldrb	r3, [r7, #19]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d047      	beq.n	8002348 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	e2fc      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02c      	beq.n	800231e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022c4:	f7ff fd99 	bl	8001dfa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fcd4 	bl	8000c74 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d0:	f7fe fcd0 	bl	8000c74 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e2e9      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80022e2:	f7ff fda6 	bl	8001e32 <LL_RCC_MSI_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f1      	beq.n	80022d0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fdc2 	bl	8001ea0 <LL_RCC_MSI_SetCalibTrimming>
 800231c:	e015      	b.n	800234a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800231e:	f7ff fd7a 	bl	8001e16 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002322:	f7fe fca7 	bl	8000c74 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232a:	f7fe fca3 	bl	8000c74 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e2bc      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800233c:	f7ff fd79 	bl	8001e32 <LL_RCC_MSI_IsReady>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f1      	bne.n	800232a <HAL_RCC_OscConfig+0x19e>
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002348:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d05f      	beq.n	8002416 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d005      	beq.n	8002368 <HAL_RCC_OscConfig+0x1dc>
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d10d      	bne.n	800237e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d10a      	bne.n	800237e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	f7ff fcb3 	bl	8001cd2 <LL_RCC_HSE_IsReady>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d050      	beq.n	8002414 <HAL_RCC_OscConfig+0x288>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d14c      	bne.n	8002414 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e29b      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_OscConfig+0x218>
 800239e:	f7ff fc7c 	bl	8001c9a <LL_RCC_HSE_Enable>
 80023a2:	e00d      	b.n	80023c0 <HAL_RCC_OscConfig+0x234>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80023ac:	d104      	bne.n	80023b8 <HAL_RCC_OscConfig+0x22c>
 80023ae:	f7ff fc47 	bl	8001c40 <LL_RCC_HSE_EnableTcxo>
 80023b2:	f7ff fc72 	bl	8001c9a <LL_RCC_HSE_Enable>
 80023b6:	e003      	b.n	80023c0 <HAL_RCC_OscConfig+0x234>
 80023b8:	f7ff fc7d 	bl	8001cb6 <LL_RCC_HSE_Disable>
 80023bc:	f7ff fc4e 	bl	8001c5c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fc54 	bl	8000c74 <HAL_GetTick>
 80023cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7fe fc50 	bl	8000c74 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e269      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80023e2:	f7ff fc76 	bl	8001cd2 <LL_RCC_HSE_IsReady>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f1      	beq.n	80023d0 <HAL_RCC_OscConfig+0x244>
 80023ec:	e013      	b.n	8002416 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ee:	f7fe fc41 	bl	8000c74 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f6:	f7fe fc3d 	bl	8000c74 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b64      	cmp	r3, #100	; 0x64
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e256      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002408:	f7ff fc63 	bl	8001cd2 <LL_RCC_HSE_IsReady>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f1      	bne.n	80023f6 <HAL_RCC_OscConfig+0x26a>
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d04b      	beq.n	80024ba <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d005      	beq.n	8002434 <HAL_RCC_OscConfig+0x2a8>
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d113      	bne.n	8002456 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d110      	bne.n	8002456 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002434:	f7ff fc7a 	bl	8001d2c <LL_RCC_HSI_IsReady>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x2be>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e235      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fc7d 	bl	8001d4e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	e031      	b.n	80024ba <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d019      	beq.n	8002492 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245e:	f7ff fc49 	bl	8001cf4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fc07 	bl	8000c74 <HAL_GetTick>
 8002466:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fc03 	bl	8000c74 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e21c      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800247c:	f7ff fc56 	bl	8001d2c <LL_RCC_HSI_IsReady>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f1      	beq.n	800246a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fc5f 	bl	8001d4e <LL_RCC_HSI_SetCalibTrimming>
 8002490:	e013      	b.n	80024ba <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002492:	f7ff fc3d 	bl	8001d10 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fbed 	bl	8000c74 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe fbe9 	bl	8000c74 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e202      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80024b0:	f7ff fc3c 	bl	8001d2c <LL_RCC_HSI_IsReady>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d06f      	beq.n	80025a6 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d057      	beq.n	800257e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69da      	ldr	r2, [r3, #28]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d036      	beq.n	8002554 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e1db      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d018      	beq.n	800253a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8002508:	f7ff fc56 	bl	8001db8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800250c:	f7fe fbb2 	bl	8000c74 <HAL_GetTick>
 8002510:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002512:	e00d      	b.n	8002530 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7fe fbae 	bl	8000c74 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b11      	cmp	r3, #17
 8002520:	d906      	bls.n	8002530 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1c7      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8002530:	f7ff fc52 	bl	8001dd8 <LL_RCC_LSI_IsReady>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ec      	bne.n	8002514 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800253a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002542:	f023 0210 	bic.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002554:	f7ff fc20 	bl	8001d98 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7fe fb8c 	bl	8000c74 <HAL_GetTick>
 800255c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe fb88 	bl	8000c74 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b11      	cmp	r3, #17
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1a1      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002572:	f7ff fc31 	bl	8001dd8 <LL_RCC_LSI_IsReady>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f1      	beq.n	8002560 <HAL_RCC_OscConfig+0x3d4>
 800257c:	e013      	b.n	80025a6 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257e:	f7ff fc1b 	bl	8001db8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fb77 	bl	8000c74 <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fb73 	bl	8000c74 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b11      	cmp	r3, #17
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e18c      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800259c:	f7ff fc1c 	bl	8001dd8 <LL_RCC_LSI_IsReady>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f1      	bne.n	800258a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80d8 	beq.w	8002764 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80025b4:	f7ff fb32 	bl	8001c1c <LL_PWR_IsEnabledBkUpAccess>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80025be:	f7ff fafb 	bl	8001bb8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fb57 	bl	8000c74 <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ca:	f7fe fb53 	bl	8000c74 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e16c      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80025dc:	f7ff fb1e 	bl	8001c1c <LL_PWR_IsEnabledBkUpAccess>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f1      	beq.n	80025ca <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d07b      	beq.n	80026e6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b85      	cmp	r3, #133	; 0x85
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b05      	cmp	r3, #5
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fb2f 	bl	8000c74 <HAL_GetTick>
 8002616:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fb21 	bl	8000c74 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e138      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002644:	f7ff fb97 	bl	8001d76 <LL_RCC_LSE_IsReady>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ef      	beq.n	800262e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b81      	cmp	r3, #129	; 0x81
 8002654:	d003      	beq.n	800265e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b85      	cmp	r3, #133	; 0x85
 800265c:	d121      	bne.n	80026a2 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7fe fb09 	bl	8000c74 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7fe fafb 	bl	8000c74 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e112      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ec      	beq.n	800267a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80026a0:	e060      	b.n	8002764 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7fe fae7 	bl	8000c74 <HAL_GetTick>
 80026a6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fad9 	bl	8000c74 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0f0      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ec      	bne.n	80026be <HAL_RCC_OscConfig+0x532>
 80026e4:	e03e      	b.n	8002764 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe fac5 	bl	8000c74 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fab7 	bl	8000c74 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0ce      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ec      	bne.n	8002702 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe faa4 	bl	8000c74 <HAL_GetTick>
 800272c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe fa96 	bl	8000c74 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0ad      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800275a:	f7ff fb0c 	bl	8001d76 <LL_RCC_LSE_IsReady>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1ef      	bne.n	8002744 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a3 	beq.w	80028b4 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d076      	beq.n	8002862 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	2b02      	cmp	r3, #2
 800277a:	d14b      	bne.n	8002814 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	f7ff fc62 	bl	8002044 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fa78 	bl	8000c74 <HAL_GetTick>
 8002784:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fa74 	bl	8000c74 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b0a      	cmp	r3, #10
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e08d      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800279a:	f7ff fc61 	bl	8002060 <LL_RCC_PLL_IsReady>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f1      	bne.n	8002788 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_RCC_OscConfig+0x734>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027b6:	4311      	orrs	r1, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027bc:	0212      	lsls	r2, r2, #8
 80027be:	4311      	orrs	r1, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027d0:	430a      	orrs	r2, r1
 80027d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027da:	f7ff fc25 	bl	8002028 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe fa41 	bl	8000c74 <HAL_GetTick>
 80027f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fa3d 	bl	8000c74 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b0a      	cmp	r3, #10
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e056      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002808:	f7ff fc2a 	bl	8002060 <LL_RCC_PLL_IsReady>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f1      	beq.n	80027f6 <HAL_RCC_OscConfig+0x66a>
 8002812:	e04f      	b.n	80028b4 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002814:	f7ff fc16 	bl	8002044 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002822:	f023 0303 	bic.w	r3, r3, #3
 8002826:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002832:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fa1a 	bl	8000c74 <HAL_GetTick>
 8002840:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7fe fa16 	bl	8000c74 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b0a      	cmp	r3, #10
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e02f      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002856:	f7ff fc03 	bl	8002060 <LL_RCC_PLL_IsReady>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f1      	bne.n	8002844 <HAL_RCC_OscConfig+0x6b8>
 8002860:	e028      	b.n	80028b4 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e023      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800286e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	f003 0203 	and.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	429a      	cmp	r2, r3
 8002882:	d115      	bne.n	80028b0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	429a      	cmp	r2, r3
 8002890:	d10e      	bne.n	80028b0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	429a      	cmp	r2, r3
 80028a0:	d106      	bne.n	80028b0 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	11c1808c 	.word	0x11c1808c

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e12c      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b98      	ldr	r3, [pc, #608]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d91b      	bls.n	800291e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b95      	ldr	r3, [pc, #596]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4993      	ldr	r1, [pc, #588]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f6:	f7fe f9bd 	bl	8000c74 <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028fe:	f7fe f9b9 	bl	8000c74 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e110      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002910:	4b8a      	ldr	r3, [pc, #552]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d1ef      	bne.n	80028fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d016      	beq.n	8002958 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fae8 	bl	8001f04 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002934:	f7fe f99e 	bl	8000c74 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800293c:	f7fe f99a 	bl	8000c74 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0f1      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800294e:	f7ff fbc5 	bl	80020dc <LL_RCC_IsActiveFlag_HPRE>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f1      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fade 	bl	8001f2a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800296e:	f7fe f981 	bl	8000c74 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002974:	e008      	b.n	8002988 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002976:	f7fe f97d 	bl	8000c74 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0d4      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002988:	f7ff fbb9 	bl	80020fe <LL_RCC_IsActiveFlag_C2HPRE>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f1      	beq.n	8002976 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fad6 	bl	8001f54 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029a8:	f7fe f964 	bl	8000c74 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029b0:	f7fe f960 	bl	8000c74 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0b7      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80029c2:	f7ff fbae 	bl	8002122 <LL_RCC_IsActiveFlag_SHDHPRE>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f1      	beq.n	80029b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff facf 	bl	8001f80 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029e2:	f7fe f947 	bl	8000c74 <HAL_GetTick>
 80029e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ea:	f7fe f943 	bl	8000c74 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e09a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029fc:	f7ff fba3 	bl	8002146 <LL_RCC_IsActiveFlag_PPRE1>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f1      	beq.n	80029ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fac4 	bl	8001fa6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe f929 	bl	8000c74 <HAL_GetTick>
 8002a22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a26:	f7fe f925 	bl	8000c74 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e07c      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a38:	f7ff fb96 	bl	8002168 <LL_RCC_IsActiveFlag_PPRE2>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f1      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d043      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002a56:	f7ff f93c 	bl	8001cd2 <LL_RCC_HSE_IsReady>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d11e      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e066      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a6c:	f7ff faf8 	bl	8002060 <LL_RCC_PLL_IsReady>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d113      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e05b      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002a82:	f7ff f9d6 	bl	8001e32 <LL_RCC_MSI_IsReady>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e050      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002a90:	f7ff f94c 	bl	8001d2c <LL_RCC_HSI_IsReady>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e049      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fa10 	bl	8001ec8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa8:	f7fe f8e4 	bl	8000c74 <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aae:	e00a      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7fe f8e0 	bl	8000c74 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e035      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	f7ff fa12 	bl	8001eee <LL_RCC_GetSysClkSource>
 8002aca:	4602      	mov	r2, r0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d1ec      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d21b      	bcs.n	8002b1c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 0207 	bic.w	r2, r3, #7
 8002aec:	4913      	ldr	r1, [pc, #76]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af4:	f7fe f8be 	bl	8000c74 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002afc:	f7fe f8ba 	bl	8000c74 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e011      	b.n	8002b32 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_ClockConfig+0x278>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1ef      	bne.n	8002afc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b1c:	f000 f8b4 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <HAL_RCC_ClockConfig+0x27c>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCC_ClockConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe f856 	bl	8000bdc <HAL_InitTick>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	58004000 	.word	0x58004000
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b56:	f7ff f9ca 	bl	8001eee <LL_RCC_GetSysClkSource>
 8002b5a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5c:	f7ff fab3 	bl	80020c6 <LL_RCC_PLL_GetMainSource>
 8002b60:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x2c>
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d139      	bne.n	8002be2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d136      	bne.n	8002be2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b74:	f7ff f96d 	bl	8001e52 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d115      	bne.n	8002baa <HAL_RCC_GetSysClockFreq+0x62>
 8002b7e:	f7ff f968 	bl	8001e52 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_GetSysClockFreq+0x4e>
 8002b88:	f7ff f973 	bl	8001e72 <LL_RCC_MSI_GetRange>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	e005      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002b96:	f7ff f977 	bl	8001e88 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	4a36      	ldr	r2, [pc, #216]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x134>)
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x8c>
 8002baa:	f7ff f952 	bl	8001e52 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x7a>
 8002bb4:	f7ff f95d 	bl	8001e72 <LL_RCC_MSI_GetRange>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	e005      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x86>
 8002bc2:	f7ff f961 	bl	8001e88 <LL_RCC_MSI_GetRangeAfterStandby>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	4a2b      	ldr	r2, [pc, #172]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x134>)
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d115      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002be0:	e012      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d102      	bne.n	8002bee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e00c      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bf4:	f7ff f840 	bl	8001c78 <LL_RCC_HSE_IsEnabledDiv2>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e001      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c04:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c06:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c08:	f7ff f971 	bl	8001eee <LL_RCC_GetSysClkSource>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d12f      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c12:	f7ff fa58 	bl	80020c6 <LL_RCC_PLL_GetMainSource>
 8002c16:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0xde>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d003      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xe4>
 8002c24:	e00d      	b.n	8002c42 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c28:	60fb      	str	r3, [r7, #12]
        break;
 8002c2a:	e00d      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c2c:	f7ff f824 	bl	8001c78 <LL_RCC_HSE_IsEnabledDiv2>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d102      	bne.n	8002c3c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c38:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c3a:	e005      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c3e:	60fb      	str	r3, [r7, #12]
        break;
 8002c40:	e002      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	60fb      	str	r3, [r7, #12]
        break;
 8002c46:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002c48:	f7ff fa1b 	bl	8002082 <LL_RCC_PLL_GetN>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	fb03 f402 	mul.w	r4, r3, r2
 8002c54:	f7ff fa2c 	bl	80020b0 <LL_RCC_PLL_GetDivider>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c62:	f7ff fa1a 	bl	800209a <LL_RCC_PLL_GetR>
 8002c66:	4603      	mov	r3, r0
 8002c68:	0f5b      	lsrs	r3, r3, #29
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c70:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002c72:	697b      	ldr	r3, [r7, #20]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}
 8002c7c:	08003ea8 	.word	0x08003ea8
 8002c80:	00f42400 	.word	0x00f42400
 8002c84:	01e84800 	.word	0x01e84800

08002c88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b598      	push	{r3, r4, r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c8c:	f7ff ff5c 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8002c90:	4604      	mov	r4, r0
 8002c92:	f7ff f99b 	bl	8001fcc <LL_RCC_GetAHBPrescaler>
 8002c96:	4603      	mov	r3, r0
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	4a03      	ldr	r2, [pc, #12]	; (8002cac <HAL_RCC_GetHCLKFreq+0x24>)
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd98      	pop	{r3, r4, r7, pc}
 8002cac:	08003e48 	.word	0x08003e48

08002cb0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b598      	push	{r3, r4, r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cb4:	f7ff ffe8 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	f7ff f99f 	bl	8001ffc <LL_RCC_GetAPB1Prescaler>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd98      	pop	{r3, r4, r7, pc}
 8002cd0:	08003e88 	.word	0x08003e88

08002cd4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b598      	push	{r3, r4, r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002cd8:	f7ff ffd6 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	f7ff f998 	bl	8002012 <LL_RCC_GetAPB2Prescaler>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	0adb      	lsrs	r3, r3, #11
 8002ce6:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd98      	pop	{r3, r4, r7, pc}
 8002cf4:	08003e88 	.word	0x08003e88

08002cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002d10:	f7ff f967 	bl	8001fe2 <LL_RCC_GetAHB3Prescaler>
 8002d14:	4603      	mov	r3, r0
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 030f 	and.w	r3, r3, #15
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9c      	lsrs	r4, r3, #18
 8002d34:	f7fe ff5c 	bl	8001bf0 <HAL_PWREx_GetVoltageRange>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f000 f80b 	bl	8002d58 <RCC_SetFlashLatency>
 8002d42:	4603      	mov	r3, r0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}
 8002d4c:	08003ea8 	.word	0x08003ea8
 8002d50:	08003e48 	.word	0x08003e48
 8002d54:	431bde83 	.word	0x431bde83

08002d58 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002d62:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <RCC_SetFlashLatency+0xf4>)
 8002d64:	f107 0320 	add.w	r3, r7, #32
 8002d68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d6c:	6018      	str	r0, [r3, #0]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002d72:	4a37      	ldr	r2, [pc, #220]	; (8002e50 <RCC_SetFlashLatency+0xf8>)
 8002d74:	f107 0318 	add.w	r3, r7, #24
 8002d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d7c:	6018      	str	r0, [r3, #0]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002d82:	4a34      	ldr	r2, [pc, #208]	; (8002e54 <RCC_SetFlashLatency+0xfc>)
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d8e:	2300      	movs	r3, #0
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d98:	d11b      	bne.n	8002dd2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9e:	e014      	b.n	8002dca <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	3338      	adds	r3, #56	; 0x38
 8002da6:	443b      	add	r3, r7
 8002da8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d807      	bhi.n	8002dc4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	443b      	add	r3, r7
 8002dbc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dc2:	e021      	b.n	8002e08 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d9e7      	bls.n	8002da0 <RCC_SetFlashLatency+0x48>
 8002dd0:	e01a      	b.n	8002e08 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd6:	e014      	b.n	8002e02 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	3338      	adds	r3, #56	; 0x38
 8002dde:	443b      	add	r3, r7
 8002de0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002de4:	461a      	mov	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d807      	bhi.n	8002dfc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	3338      	adds	r3, #56	; 0x38
 8002df2:	443b      	add	r3, r7
 8002df4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dfa:	e005      	b.n	8002e08 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	3301      	adds	r3, #1
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d9e7      	bls.n	8002dd8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <RCC_SetFlashLatency+0x100>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 0207 	bic.w	r2, r3, #7
 8002e10:	4911      	ldr	r1, [pc, #68]	; (8002e58 <RCC_SetFlashLatency+0x100>)
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e18:	f7fd ff2c 	bl	8000c74 <HAL_GetTick>
 8002e1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e1e:	e008      	b.n	8002e32 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e20:	f7fd ff28 	bl	8000c74 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e007      	b.n	8002e42 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <RCC_SetFlashLatency+0x100>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1ef      	bne.n	8002e20 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3738      	adds	r7, #56	; 0x38
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	08003e2c 	.word	0x08003e2c
 8002e50:	08003e34 	.word	0x08003e34
 8002e54:	08003e3c 	.word	0x08003e3c
 8002e58:	58004000 	.word	0x58004000

08002e5c <LL_RCC_LSE_IsReady>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d101      	bne.n	8002e74 <LL_RCC_LSE_IsReady+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_RCC_LSE_IsReady+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_SetUSARTClockSource>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	43db      	mvns	r3, r3
 8002e94:	401a      	ands	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_SetI2SClockSource>:
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <LL_RCC_SetLPUARTClockSource>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_SetI2CClockSource>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_SetLPTIMClockSource>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <LL_RCC_SetRNGClockSource>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <LL_RCC_SetADCClockSource>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002faa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_SetRTCClockSource>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <LL_RCC_GetRTCClockSource>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <LL_RCC_ForceBackupDomainReset>:
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
	...

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003050:	2300      	movs	r3, #0
 8003052:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003054:	2300      	movs	r3, #0
 8003056:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d058      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003064:	f7fe fda8 	bl	8001bb8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003068:	f7fd fe04 	bl	8000c74 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800306e:	e009      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003070:	f7fd fe00 	bl	8000c74 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	74fb      	strb	r3, [r7, #19]
        break;
 8003082:	e006      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003084:	4b7b      	ldr	r3, [pc, #492]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003090:	d1ee      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d13c      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003098:	f7ff ffa7 	bl	8002fea <LL_RCC_GetRTCClockSource>
 800309c:	4602      	mov	r2, r0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d00f      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030b4:	f7ff ffa5 	bl	8003002 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030b8:	f7ff ffb3 	bl	8003022 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d014      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fd fdd0 	bl	8000c74 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80030d6:	e00b      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fd fdcc 	bl	8000c74 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d902      	bls.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	74fb      	strb	r3, [r7, #19]
            break;
 80030ee:	e004      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80030f0:	f7ff feb4 	bl	8002e5c <LL_RCC_LSE_IsReady>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d1ee      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff5b 	bl	8002fc0 <LL_RCC_SetRTCClockSource>
 800310a:	e004      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	74bb      	strb	r3, [r7, #18]
 8003110:	e001      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fea9 	bl	8002e7e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d004      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fe9e 	bl	8002e7e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	d004      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fec0 	bl	8002ed8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fee6 	bl	8002f3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fedb 	bl	8002f3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fed0 	bl	8002f3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d004      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fea9 	bl	8002f02 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fe9e 	bl	8002f02 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d004      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe93 	bl	8002f02 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d011      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fe5e 	bl	8002eae <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fa:	d107      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80031fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800320a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d010      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fea5 	bl	8002f6c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003238:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d011      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fea3 	bl	8002f96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d107      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800326a:	7cbb      	ldrb	r3, [r7, #18]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	58000400 	.word	0x58000400

08003278 <LL_RCC_GetUSARTClockSource>:
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	401a      	ands	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	4313      	orrs	r3, r2
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <LL_RCC_GetLPUARTClockSource>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4013      	ands	r3, r2
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e042      	b.n	8003352 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fbec 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f82d 	bl	800335c <UART_SetConfig>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e022      	b.n	8003352 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fa95 	bl	8003844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003328:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003338:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb1b 	bl	8003986 <UART_CheckIdleState>
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800335c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003360:	b08c      	sub	sp, #48	; 0x30
 8003362:	af00      	add	r7, sp, #0
 8003364:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	431a      	orrs	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	431a      	orrs	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	4313      	orrs	r3, r2
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	4b94      	ldr	r3, [pc, #592]	; (80035dc <UART_SetConfig+0x280>)
 800338c:	4013      	ands	r3, r2
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003394:	430b      	orrs	r3, r1
 8003396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a89      	ldr	r2, [pc, #548]	; (80035e0 <UART_SetConfig+0x284>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d004      	beq.n	80033c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c4:	4313      	orrs	r3, r2
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033dc:	430b      	orrs	r3, r1
 80033de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f023 010f 	bic.w	r1, r3, #15
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a7a      	ldr	r2, [pc, #488]	; (80035e4 <UART_SetConfig+0x288>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d127      	bne.n	8003450 <UART_SetConfig+0xf4>
 8003400:	2003      	movs	r0, #3
 8003402:	f7ff ff39 	bl	8003278 <LL_RCC_GetUSARTClockSource>
 8003406:	4603      	mov	r3, r0
 8003408:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800340c:	2b03      	cmp	r3, #3
 800340e:	d81b      	bhi.n	8003448 <UART_SetConfig+0xec>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <UART_SetConfig+0xbc>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	08003429 	.word	0x08003429
 800341c:	08003439 	.word	0x08003439
 8003420:	08003431 	.word	0x08003431
 8003424:	08003441 	.word	0x08003441
 8003428:	2301      	movs	r3, #1
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800342e:	e080      	b.n	8003532 <UART_SetConfig+0x1d6>
 8003430:	2302      	movs	r3, #2
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003436:	e07c      	b.n	8003532 <UART_SetConfig+0x1d6>
 8003438:	2304      	movs	r3, #4
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800343e:	e078      	b.n	8003532 <UART_SetConfig+0x1d6>
 8003440:	2308      	movs	r3, #8
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003446:	e074      	b.n	8003532 <UART_SetConfig+0x1d6>
 8003448:	2310      	movs	r3, #16
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800344e:	e070      	b.n	8003532 <UART_SetConfig+0x1d6>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a64      	ldr	r2, [pc, #400]	; (80035e8 <UART_SetConfig+0x28c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d138      	bne.n	80034cc <UART_SetConfig+0x170>
 800345a:	200c      	movs	r0, #12
 800345c:	f7ff ff0c 	bl	8003278 <LL_RCC_GetUSARTClockSource>
 8003460:	4603      	mov	r3, r0
 8003462:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d82c      	bhi.n	80034c4 <UART_SetConfig+0x168>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <UART_SetConfig+0x114>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	080034a5 	.word	0x080034a5
 8003474:	080034c5 	.word	0x080034c5
 8003478:	080034c5 	.word	0x080034c5
 800347c:	080034c5 	.word	0x080034c5
 8003480:	080034b5 	.word	0x080034b5
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034c5 	.word	0x080034c5
 800348c:	080034c5 	.word	0x080034c5
 8003490:	080034ad 	.word	0x080034ad
 8003494:	080034c5 	.word	0x080034c5
 8003498:	080034c5 	.word	0x080034c5
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	080034bd 	.word	0x080034bd
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034aa:	e042      	b.n	8003532 <UART_SetConfig+0x1d6>
 80034ac:	2302      	movs	r3, #2
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b2:	e03e      	b.n	8003532 <UART_SetConfig+0x1d6>
 80034b4:	2304      	movs	r3, #4
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ba:	e03a      	b.n	8003532 <UART_SetConfig+0x1d6>
 80034bc:	2308      	movs	r3, #8
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c2:	e036      	b.n	8003532 <UART_SetConfig+0x1d6>
 80034c4:	2310      	movs	r3, #16
 80034c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ca:	e032      	b.n	8003532 <UART_SetConfig+0x1d6>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a43      	ldr	r2, [pc, #268]	; (80035e0 <UART_SetConfig+0x284>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d12a      	bne.n	800352c <UART_SetConfig+0x1d0>
 80034d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80034da:	f7ff fedf 	bl	800329c <LL_RCC_GetLPUARTClockSource>
 80034de:	4603      	mov	r3, r0
 80034e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034e4:	d01a      	beq.n	800351c <UART_SetConfig+0x1c0>
 80034e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ea:	d81b      	bhi.n	8003524 <UART_SetConfig+0x1c8>
 80034ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f0:	d00c      	beq.n	800350c <UART_SetConfig+0x1b0>
 80034f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f6:	d815      	bhi.n	8003524 <UART_SetConfig+0x1c8>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <UART_SetConfig+0x1a8>
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003500:	d008      	beq.n	8003514 <UART_SetConfig+0x1b8>
 8003502:	e00f      	b.n	8003524 <UART_SetConfig+0x1c8>
 8003504:	2300      	movs	r3, #0
 8003506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350a:	e012      	b.n	8003532 <UART_SetConfig+0x1d6>
 800350c:	2302      	movs	r3, #2
 800350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003512:	e00e      	b.n	8003532 <UART_SetConfig+0x1d6>
 8003514:	2304      	movs	r3, #4
 8003516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800351a:	e00a      	b.n	8003532 <UART_SetConfig+0x1d6>
 800351c:	2308      	movs	r3, #8
 800351e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003522:	e006      	b.n	8003532 <UART_SetConfig+0x1d6>
 8003524:	2310      	movs	r3, #16
 8003526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800352a:	e002      	b.n	8003532 <UART_SetConfig+0x1d6>
 800352c:	2310      	movs	r3, #16
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2a      	ldr	r2, [pc, #168]	; (80035e0 <UART_SetConfig+0x284>)
 8003538:	4293      	cmp	r3, r2
 800353a:	f040 80a4 	bne.w	8003686 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800353e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003542:	2b08      	cmp	r3, #8
 8003544:	d823      	bhi.n	800358e <UART_SetConfig+0x232>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <UART_SetConfig+0x1f0>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	08003571 	.word	0x08003571
 8003550:	0800358f 	.word	0x0800358f
 8003554:	08003579 	.word	0x08003579
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800357f 	.word	0x0800357f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800358f 	.word	0x0800358f
 800356c:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003570:	f7ff fb9e 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003576:	e010      	b.n	800359a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <UART_SetConfig+0x290>)
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800357c:	e00d      	b.n	800359a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7ff fae3 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 8003582:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003584:	e009      	b.n	800359a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800358c:	e005      	b.n	800359a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8137 	beq.w	8003810 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <UART_SetConfig+0x294>)
 80035a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d305      	bcc.n	80035d2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d910      	bls.n	80035f4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035d8:	e11a      	b.n	8003810 <UART_SetConfig+0x4b4>
 80035da:	bf00      	nop
 80035dc:	cfff69f3 	.word	0xcfff69f3
 80035e0:	40008000 	.word	0x40008000
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40004400 	.word	0x40004400
 80035ec:	00f42400 	.word	0x00f42400
 80035f0:	08003ee8 	.word	0x08003ee8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	2200      	movs	r2, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	60fa      	str	r2, [r7, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	4a8e      	ldr	r2, [pc, #568]	; (800383c <UART_SetConfig+0x4e0>)
 8003602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003606:	b29b      	uxth	r3, r3
 8003608:	2200      	movs	r2, #0
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003616:	f7fc fdaf 	bl	8000178 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	020b      	lsls	r3, r1, #8
 800362c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003630:	0202      	lsls	r2, r0, #8
 8003632:	6979      	ldr	r1, [r7, #20]
 8003634:	6849      	ldr	r1, [r1, #4]
 8003636:	0849      	lsrs	r1, r1, #1
 8003638:	2000      	movs	r0, #0
 800363a:	460c      	mov	r4, r1
 800363c:	4605      	mov	r5, r0
 800363e:	eb12 0804 	adds.w	r8, r2, r4
 8003642:	eb43 0905 	adc.w	r9, r3, r5
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	469a      	mov	sl, r3
 800364e:	4693      	mov	fp, r2
 8003650:	4652      	mov	r2, sl
 8003652:	465b      	mov	r3, fp
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fc fd8e 	bl	8000178 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800366a:	d308      	bcc.n	800367e <UART_SetConfig+0x322>
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003672:	d204      	bcs.n	800367e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a3a      	ldr	r2, [r7, #32]
 800367a:	60da      	str	r2, [r3, #12]
 800367c:	e0c8      	b.n	8003810 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003684:	e0c4      	b.n	8003810 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368e:	d168      	bne.n	8003762 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003694:	2b08      	cmp	r3, #8
 8003696:	d828      	bhi.n	80036ea <UART_SetConfig+0x38e>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <UART_SetConfig+0x344>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	080036cd 	.word	0x080036cd
 80036a8:	080036d5 	.word	0x080036d5
 80036ac:	080036eb 	.word	0x080036eb
 80036b0:	080036db 	.word	0x080036db
 80036b4:	080036eb 	.word	0x080036eb
 80036b8:	080036eb 	.word	0x080036eb
 80036bc:	080036eb 	.word	0x080036eb
 80036c0:	080036e3 	.word	0x080036e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7ff faf4 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ca:	e014      	b.n	80036f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7ff fb02 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d2:	e010      	b.n	80036f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d4:	4b5a      	ldr	r3, [pc, #360]	; (8003840 <UART_SetConfig+0x4e4>)
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036d8:	e00d      	b.n	80036f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036da:	f7ff fa35 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 80036de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036e0:	e009      	b.n	80036f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036e8:	e005      	b.n	80036f6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8089 	beq.w	8003810 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	4a4e      	ldr	r2, [pc, #312]	; (800383c <UART_SetConfig+0x4e0>)
 8003704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003708:	461a      	mov	r2, r3
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003710:	005a      	lsls	r2, r3, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	441a      	add	r2, r3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	b29b      	uxth	r3, r3
 8003724:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d916      	bls.n	800375a <UART_SetConfig+0x3fe>
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d212      	bcs.n	800375a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	b29b      	uxth	r3, r3
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	b29a      	uxth	r2, r3
 800374a:	8bfb      	ldrh	r3, [r7, #30]
 800374c:	4313      	orrs	r3, r2
 800374e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	8bfa      	ldrh	r2, [r7, #30]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	e05a      	b.n	8003810 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003760:	e056      	b.n	8003810 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003762:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003766:	2b08      	cmp	r3, #8
 8003768:	d827      	bhi.n	80037ba <UART_SetConfig+0x45e>
 800376a:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0x414>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7ff fa8c 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8003798:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800379a:	e014      	b.n	80037c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7ff fa9a 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 80037a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a2:	e010      	b.n	80037c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b26      	ldr	r3, [pc, #152]	; (8003840 <UART_SetConfig+0x4e4>)
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037a8:	e00d      	b.n	80037c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7ff f9cd 	bl	8002b48 <HAL_RCC_GetSysClockFreq>
 80037ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037b0:	e009      	b.n	80037c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037b8:	e005      	b.n	80037c6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037c4:	bf00      	nop
    }

    if (pclk != 0U)
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	4a1a      	ldr	r2, [pc, #104]	; (800383c <UART_SetConfig+0x4e0>)
 80037d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d6:	461a      	mov	r2, r3
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	fbb3 f2f2 	udiv	r2, r3, r2
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	441a      	add	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	2b0f      	cmp	r3, #15
 80037f6:	d908      	bls.n	800380a <UART_SetConfig+0x4ae>
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fe:	d204      	bcs.n	800380a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	e002      	b.n	8003810 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2201      	movs	r2, #1
 8003814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2201      	movs	r2, #1
 800381c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800382c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003830:	4618      	mov	r0, r3
 8003832:	3730      	adds	r7, #48	; 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	08003ee8 	.word	0x08003ee8
 8003840:	00f42400 	.word	0x00f42400

08003844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01a      	beq.n	800395a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003942:	d10a      	bne.n	800395a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af02      	add	r7, sp, #8
 800398c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003996:	f7fd f96d 	bl	8000c74 <HAL_GetTick>
 800399a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	d10e      	bne.n	80039c8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f82f 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e025      	b.n	8003a14 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d10e      	bne.n	80039f4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f819 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e00f      	b.n	8003a14 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b09c      	sub	sp, #112	; 0x70
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2c:	e0a9      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	f000 80a5 	beq.w	8003b82 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a38:	f7fd f91c 	bl	8000c74 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d302      	bcc.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x32>
 8003a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d140      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a62:	667b      	str	r3, [r7, #100]	; 0x64
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a6e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e6      	bne.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3308      	adds	r3, #8
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	663b      	str	r3, [r7, #96]	; 0x60
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aa0:	64ba      	str	r2, [r7, #72]	; 0x48
 8003aa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e069      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d051      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aec:	d149      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
 8003b18:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b4a:	623a      	str	r2, [r7, #32]
 8003b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	69f9      	ldr	r1, [r7, #28]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e010      	b.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	bf0c      	ite	eq
 8003b92:	2301      	moveq	r3, #1
 8003b94:	2300      	movne	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	f43f af46 	beq.w	8003a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3770      	adds	r7, #112	; 0x70
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e027      	b.n	8003c12 <HAL_UARTEx_DisableFifoMode+0x66>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2224      	movs	r2, #36	; 0x24
 8003bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e02d      	b.n	8003c90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	; 0x24
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f84f 	bl	8003d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e02d      	b.n	8003d0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2224      	movs	r2, #36	; 0x24
 8003cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f811 	bl	8003d14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d108      	bne.n	8003d36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d34:	e031      	b.n	8003d9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d36:	2308      	movs	r3, #8
 8003d38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	0e5b      	lsrs	r3, r3, #25
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	0f5b      	lsrs	r3, r3, #29
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	7b3a      	ldrb	r2, [r7, #12]
 8003d62:	4910      	ldr	r1, [pc, #64]	; (8003da4 <UARTEx_SetNbDataToProcess+0x90>)
 8003d64:	5c8a      	ldrb	r2, [r1, r2]
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d6a:	7b3a      	ldrb	r2, [r7, #12]
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <UARTEx_SetNbDataToProcess+0x94>)
 8003d6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	7b7a      	ldrb	r2, [r7, #13]
 8003d80:	4908      	ldr	r1, [pc, #32]	; (8003da4 <UARTEx_SetNbDataToProcess+0x90>)
 8003d82:	5c8a      	ldrb	r2, [r1, r2]
 8003d84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d88:	7b7a      	ldrb	r2, [r7, #13]
 8003d8a:	4907      	ldr	r1, [pc, #28]	; (8003da8 <UARTEx_SetNbDataToProcess+0x94>)
 8003d8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	08003f00 	.word	0x08003f00
 8003da8:	08003f08 	.word	0x08003f08

08003dac <__libc_init_array>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	4d0d      	ldr	r5, [pc, #52]	; (8003de4 <__libc_init_array+0x38>)
 8003db0:	4c0d      	ldr	r4, [pc, #52]	; (8003de8 <__libc_init_array+0x3c>)
 8003db2:	1b64      	subs	r4, r4, r5
 8003db4:	10a4      	asrs	r4, r4, #2
 8003db6:	2600      	movs	r6, #0
 8003db8:	42a6      	cmp	r6, r4
 8003dba:	d109      	bne.n	8003dd0 <__libc_init_array+0x24>
 8003dbc:	4d0b      	ldr	r5, [pc, #44]	; (8003dec <__libc_init_array+0x40>)
 8003dbe:	4c0c      	ldr	r4, [pc, #48]	; (8003df0 <__libc_init_array+0x44>)
 8003dc0:	f000 f820 	bl	8003e04 <_init>
 8003dc4:	1b64      	subs	r4, r4, r5
 8003dc6:	10a4      	asrs	r4, r4, #2
 8003dc8:	2600      	movs	r6, #0
 8003dca:	42a6      	cmp	r6, r4
 8003dcc:	d105      	bne.n	8003dda <__libc_init_array+0x2e>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd4:	4798      	blx	r3
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	e7ee      	b.n	8003db8 <__libc_init_array+0xc>
 8003dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dde:	4798      	blx	r3
 8003de0:	3601      	adds	r6, #1
 8003de2:	e7f2      	b.n	8003dca <__libc_init_array+0x1e>
 8003de4:	08003f18 	.word	0x08003f18
 8003de8:	08003f18 	.word	0x08003f18
 8003dec:	08003f18 	.word	0x08003f18
 8003df0:	08003f1c 	.word	0x08003f1c

08003df4 <memset>:
 8003df4:	4402      	add	r2, r0
 8003df6:	4603      	mov	r3, r0
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <memset+0xa>
 8003dfc:	4770      	bx	lr
 8003dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003e02:	e7f9      	b.n	8003df8 <memset+0x4>

08003e04 <_init>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	bf00      	nop
 8003e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e0a:	bc08      	pop	{r3}
 8003e0c:	469e      	mov	lr, r3
 8003e0e:	4770      	bx	lr

08003e10 <_fini>:
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	bf00      	nop
 8003e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e16:	bc08      	pop	{r3}
 8003e18:	469e      	mov	lr, r3
 8003e1a:	4770      	bx	lr
